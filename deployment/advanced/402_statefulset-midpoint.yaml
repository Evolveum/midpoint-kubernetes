apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: midpoint
  namespace: midpoint-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: midpoint-node
  template:
    metadata:
      labels:
        app: midpoint-node
    spec:
      volumes:
        - name: midpoint-home
          persistentVolumeClaim:
            claimName: midpoint 
        - name: midpoint-pio
          configMap:
            name: post-initial-objects
      initContainers:
        - name: midpoint-init
          image: 'evolveum/midpoint:4.8.2-alpine'
          command: [ "/bin/bash", "-c" ]
          args:
            - cd /opt/midpoint ;
              bin/midpoint.sh init-native ;
              echo ' - - - - - - ' ;
              bin/ninja.sh -B info >/dev/null 2>/tmp/ninja.log ;
              grep -q "ERROR" /tmp/ninja.log && (
              bin/ninja.sh -B run-sql --create --mode REPOSITORY  ;
              bin/ninja.sh -B run-sql --create --mode AUDIT
              ) ||
              echo -e '\\n Repository init is not needed...' ;
          env:
            - name: MP_INIT_CFG
              value: /opt/midpoint/var
            - name: MP_SET_midpoint_repository_database
              value: postgresql
            - name: MP_SET_midpoint_repository_jdbcUsername
              value: midpoint
            - name: MP_SET_midpoint_repository_jdbcPassword
              valueFrom:
                secretKeyRef:
                  name: midpoint-repository
                  key: password
            - name: MP_SET_midpoint_repository_jdbcUrl
              value: jdbc:postgresql://midpoint-repository:5432/midpoint
          volumeMounts:
            - name: midpoint-home
              mountPath: /opt/midpoint/var
          imagePullPolicy: IfNotPresent
      containers:
        - name: midpoint
          image: 'evolveum/midpoint:4.8.2-alpine'
          ports:
            - name: gui
              containerPort: 8080
              protocol: TCP
          env:
            - name: MP_SET_midpoint_administrator_initialPassword
              valueFrom:
                secretKeyRef:
                  name: midpoint-init-pass
                  key: passwd
            - name: MP_SET_midpoint_repository_database
              value: postgresql
            - name: MP_SET_midpoint_repository_jdbcUsername
              value: midpoint
            - name: MP_SET_midpoint_repository_jdbcPassword
              valueFrom:
                secretKeyRef:
                  name: midpoint-repository
                  key: password
            - name: MP_SET_midpoint_repository_jdbcUrl
              value: jdbc:postgresql://midpoint-repository:5432/midpoint
            - name: MP_SET_midpoint_taskManager_clustered
              value: 'true'
            - name: MP_SET_midpoint_nodeIdSource
              value: hostname
            - name: MP_ENTRY_POINT
              value: /opt/external-ro
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: midpoint-home
              mountPath: /opt/midpoint/var
            - name: midpoint-home
              mountPath: /opt/midpoint/var/log
              subPathExpr: logs/$(POD_NAME)
            - name: midpoint-pio
              mountPath: /opt/external-ro/post-initial-objects
          imagePullPolicy: IfNotPresent          
  serviceName: midpoint
